{"ast":null,"code":"var _jsxFileName = \"/home/vaderrama/Escritorio/statistics_distribution/frontdistributions/src/components/home.js\";\nimport React, { Component } from 'react';\nimport './home.css';\nimport Distribution from \"./distributions\";\nimport Add from \"./add\";\nimport { Card, Col, Container, FormControl, Nav, Navbar, NavDropdown, Row } from \"react-bootstrap\";\nimport { Form } from \"react-bootstrap\";\nimport axios from 'axios';\nimport { ThemeConsumer } from 'react-bootstrap/esm/ThemeProvider';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Area, AreaChart, Legend } from 'recharts';\nimport { CSVLink, CSVDownload } from \"react-csv\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      samples: 1,\n      data: [],\n      type: \"\",\n      charts: [],\n      n: 1,\n      listCharts: [],\n      selected: \"\",\n      loadData: false,\n      loadFormat: false,\n      dataForChart: []\n    };\n    this.handleOnAdd = this.handleOnAdd.bind(this);\n    this.handleOnRemove = this.handleOnRemove.bind(this);\n    this.handleOnCharts = this.handleOnCharts.bind(this);\n    this.handleChangeType = this.handleChangeType.bind(this);\n    this.handleChangeSamples = this.handleChangeSamples.bind(this);\n    this.handleSelectedDistributions = this.handleSelectedDistributions.bind(this);\n  }\n\n  handleOnCharts() {\n    console.log(this.state);\n    let {\n      loadData,\n      loadFormat\n    } = this.state;\n    this.setState({\n      loadFormat: false\n    });\n    let config = {\n      params: {\n        data: this.state.data,\n        samples: this.state.samples,\n        n: this.state.n\n      }\n    }; // Peticion para obtener los datos del servidor \n\n    axios.get(`http://127.0.0.1:8000/api-dist/get_charts`, config).then(response => {\n      console.log(\"Getting data from server\");\n      console.log(response.data);\n      this.setState({\n        loadData: true,\n        charts: response.data\n      }); // Formateamos los datos para poder tratarlos con la libreria de Recharts \n\n      let indice, dat;\n      let {\n        samples,\n        charts,\n        loadFormat,\n        dataForChart,\n        n,\n        listCharts\n      } = this.state;\n\n      if (!loadFormat) {\n        for (let i = 0; i < n; i++) {\n          dataForChart = [];\n\n          for (let j = 0; j < samples; j++) {\n            indice = j.toString();\n            dat = {\n              name: indice,\n              uv: charts[i][j]\n            };\n            dataForChart.push(dat);\n          }\n\n          listCharts.push(dataForChart);\n        }\n\n        this.setState({\n          dataForChart: dataForChart,\n          loadFormat: true,\n          listCharts: listCharts\n        });\n      }\n    });\n  } // Funcion que muestra los datos ya obtenidos y formateados \n\n\n  showChart() {\n    let rows = [];\n    const {\n      n,\n      listCharts\n    } = this.state;\n\n    for (let i = 0; i < n; i++) {\n      rows.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"charts\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: i\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n          width: 500,\n          height: 300,\n          data: listCharts[i],\n          margin: {\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5\n          },\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"uv\",\n            stroke: \"#8884d8\",\n            activeDot: {\n              r: 8\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CSVLink, {\n          data: listCharts[i],\n          children: \"Download CSV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this));\n    }\n\n    return rows;\n  } // AÃ±adimos un desplegable \n\n\n  addRow() {\n    let row = [];\n    const {\n      n\n    } = this.state;\n\n    for (var i = 0; i < n; i++) {\n      row.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n          children: i\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Add, {\n          type: this.type,\n          handleSelectedDistributions: this.handleSelectedDistributions\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 15\n      }, this));\n    }\n\n    return row;\n  }\n\n  handleOnAdd() {\n    let {\n      n\n    } = this.state;\n    this.setState({\n      n: n + 1\n    });\n  }\n\n  handleOnRemove() {\n    let {\n      n\n    } = this.state;\n    this.setState({\n      n: n - 1\n    });\n  }\n\n  handleChangeType(e) {\n    this.setState({\n      type: e.target.value\n    });\n  }\n\n  handleChangeSamples(e) {\n    this.setState({\n      samples: e.target.value\n    });\n  }\n\n  handleSelectedDistributions(value) {\n    let {\n      data\n    } = this.state;\n    let {\n      n\n    } = this.state;\n    data[n] = value.value;\n    this.setState({\n      data\n    });\n  }\n\n  render() {\n    const {\n      loadFormat,\n      loadData\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main_block\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Statistics science : Probability Distributions \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"options_block\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"type_block position\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Choose the type of the Distribution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"type\",\n            onChange: this.handleChangeType,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"discrete\",\n              children: \"Discrete Probability\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"continuous\",\n              children: \"Continuous Probability\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"add_block position\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Add distributions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.handleOnAdd,\n            type: \"button\",\n            class: \"btn btn-primary btn-secondary\",\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 25\n          }, this), this.addRow(), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.handleOnRemove,\n            type: \"button\",\n            class: \"btn btn-primary btn-secondary\",\n            children: \"-\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"samples_block position\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Introduce number of samples\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"samples\",\n            onChange: this.handleChangeSamples,\n            type: \"number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.handleOnCharts,\n            type: \"button\",\n            class: \"btn btn-success\",\n            children: \"Press when u are ready\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"charts_block position\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Charts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }, this), loadFormat ? this.showChart() : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Home;\n/*\n formatData(){\n   let indice,dat;\n   let {samples,charts,loadFormat,dataForChart,n,listCharts} = this.state;\n   \n   if(!loadFormat){\n    \n   for (let i = 0; i < n; i++) {\n     for (let j = 0; j < samples; j++){\n       \n       indice = j.toString();\n        dat = {\n          name : indice,\n          uv : charts[i][j], \n        }\n       \n     dataForChart.push(dat);\n  }\n  console.log(i);\n  listCharts.push(dataForChart);\n  console.log(listCharts);\n }\n\n  this.setState({\n    dataForChart:dataForChart,\n    loadFormat:true,\n    listCharts:listCharts,\n   });\n \n }\n}\n*/","map":{"version":3,"sources":["/home/vaderrama/Escritorio/statistics_distribution/frontdistributions/src/components/home.js"],"names":["React","Component","Distribution","Add","Card","Col","Container","FormControl","Nav","Navbar","NavDropdown","Row","Form","axios","ThemeConsumer","LineChart","Line","CartesianGrid","XAxis","YAxis","Tooltip","Area","AreaChart","Legend","CSVLink","CSVDownload","Home","constructor","props","state","samples","data","type","charts","n","listCharts","selected","loadData","loadFormat","dataForChart","handleOnAdd","bind","handleOnRemove","handleOnCharts","handleChangeType","handleChangeSamples","handleSelectedDistributions","console","log","setState","config","params","get","then","response","indice","dat","i","j","toString","name","uv","push","showChart","rows","top","right","left","bottom","r","addRow","row","e","target","value","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport './home.css';\nimport Distribution from \"./distributions\";\nimport Add from \"./add\"\nimport {Card, Col, Container, FormControl, Nav, Navbar, NavDropdown, Row} from \"react-bootstrap\";\nimport {Form} from \"react-bootstrap\";\nimport axios from 'axios';\nimport { ThemeConsumer } from 'react-bootstrap/esm/ThemeProvider';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Area, AreaChart,Legend  } from 'recharts';\nimport { CSVLink, CSVDownload } from \"react-csv\";\n\nclass Home extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            samples:1,\n            data:[],\n            type:\"\",\n            charts:[],\n            n:1,\n            listCharts:[],\n            selected:\"\",\n            loadData:false,\n            loadFormat:false,\n            dataForChart:[],\n            \n        };\n        this.handleOnAdd = this.handleOnAdd.bind(this);\n        this.handleOnRemove = this.handleOnRemove.bind(this);\n        this.handleOnCharts = this.handleOnCharts.bind(this);\n        this.handleChangeType = this.handleChangeType.bind(this);\n        this.handleChangeSamples = this.handleChangeSamples.bind(this);\n        this.handleSelectedDistributions = this.handleSelectedDistributions.bind(this);\n     \n       \n         \n    }\n\n    handleOnCharts() {\n      console.log(this.state);\n      let {loadData,loadFormat} = this.state;\n      this.setState({\n        loadFormat: false,\n      });\n        let config = {\n            params: {\n                data: this.state.data,\n                samples: this.state.samples,\n                n: this.state.n,\n            },\n        }  \n        // Peticion para obtener los datos del servidor \n        axios.get(`http://127.0.0.1:8000/api-dist/get_charts`, config)\n            .then(response => {\n                console.log(\"Getting data from server\")\n                console.log(response.data)\n                this.setState({\n                  loadData: true,\n                    charts: response.data,\n                });\n\n                // Formateamos los datos para poder tratarlos con la libreria de Recharts \n                let indice,dat;\n                let {samples,charts,loadFormat,dataForChart,n,listCharts} = this.state;\n                \n                if(!loadFormat){\n                 \n                for (let i = 0; i < n; i++) {\n                  dataForChart=[];\n                  for (let j = 0; j < samples; j++){\n                    \n                    indice = j.toString();\n                     dat = {\n                       name : indice,\n                       uv : charts[i][j], \n                     }\n                    \n                  dataForChart.push(dat);\n               }\n               listCharts.push(dataForChart);\n              }\n             \n               this.setState({\n                 dataForChart:dataForChart,\n                 loadFormat:true,\n                 listCharts:listCharts,\n                });\n              \n              }\n            })\n    }\n  \n    \n// Funcion que muestra los datos ya obtenidos y formateados \n    showChart(){\n      let rows = []; \n      const {n, listCharts} = this.state;\n      for (let i = 0; i < n; i++) {\n          rows.push(\n            <div className=\"charts\">\n\n            <h4>{i}</h4>\n            <LineChart\n            width={500}\n            height={300}\n            data={listCharts[i]}\n            margin={{\n              top: 5,\n              right: 30,\n              left: 20,\n              bottom: 5\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Line\n              type=\"monotone\"\n              dataKey=\"uv\"\n              stroke=\"#8884d8\"\n              activeDot={{ r: 8 }}\n            />\n          </LineChart>\n          <CSVLink data={listCharts[i]}>Download CSV</CSVLink>\n          </div>\n           );\n          }\n      return rows;\n    }\n    \n    // AÃ±adimos un desplegable \n    addRow(){\n        let row = [];\n        const {n} = this.state;\n\n        for(var i=0; i<n; i++){\n            row.push(\n              <div>\n                <h6>{i}</h6>\n                <Add key={i} type={this.type}  handleSelectedDistributions={this.handleSelectedDistributions}/>\n                </div>\n            );\n        }\n        return row;\n    }\n    \n    handleOnAdd(){\n        let {n} = this.state;\n        this.setState({n : n+1})\n    }\n\n    handleOnRemove(){\n        let {n} = this.state;\n        this.setState({n : n-1})\n      };\n\n    handleChangeType(e){\n        this.setState({ type: e.target.value });\n      }\n\n    handleChangeSamples(e){\n          this.setState({samples : e.target.value});\n      }\n\n    handleSelectedDistributions(value){\n        let {data} = this.state;\n        let {n} = this.state;\n        data[n] = value.value;\n        this.setState({data});\n       \n    }\n    \n\n    render() {\n      const {loadFormat,loadData} = this.state\n        return (\n          \n            <div className=\"main_block\">\n                <h1>Statistics science : Probability Distributions </h1>\n\n                <div className = \"options_block\">\n                    <div className = \"type_block position\">\n                        <h4>Choose the type of the Distribution</h4>\n                        <select id=\"type\" onChange={this.handleChangeType}>\n                           \n                            <option value=\"discrete\">Discrete Probability</option>\n                            <option value=\"continuous\">Continuous Probability</option>\n                        </select>\n                    </div>\n                    <div className = \"add_block position\">\n                        <h4>Add distributions</h4>\n                        <button onClick={this.handleOnAdd} type=\"button\" class=\"btn btn-primary btn-secondary\">+</button>\n                        {this.addRow()}\n                        <button onClick={this.handleOnRemove} type=\"button\" class=\"btn btn-primary btn-secondary\">-</button>\n                    </div>\n                    <div className=\"samples_block position\">\n                        <h4>Introduce number of samples</h4>\n                        <input id=\"samples\" onChange={this.handleChangeSamples} type=\"number\"></input>\n                        <button onClick={this.handleOnCharts} type=\"button\" class=\"btn btn-success\">Press when u are ready</button>\n\n                    </div>\n                </div>\n\n                <div className = \"charts_block position\">\n                    <h4>Charts</h4>\n                  \n                    {loadFormat ? this.showChart() : null}\n                    \n                </div>\n              \n            </div>\n        )\n    }\n}\nexport default Home;\n\n\n   /*\n    formatData(){\n      let indice,dat;\n      let {samples,charts,loadFormat,dataForChart,n,listCharts} = this.state;\n      \n      if(!loadFormat){\n       \n      for (let i = 0; i < n; i++) {\n        for (let j = 0; j < samples; j++){\n          \n          indice = j.toString();\n           dat = {\n             name : indice,\n             uv : charts[i][j], \n           }\n          \n        dataForChart.push(dat);\n     }\n     console.log(i);\n     listCharts.push(dataForChart);\n     console.log(listCharts);\n    }\n   \n     this.setState({\n       dataForChart:dataForChart,\n       loadFormat:true,\n       listCharts:listCharts,\n      });\n    \n    }\n   }\n  \n*/"]},"metadata":{},"sourceType":"module"}